#!/usr/bin/python
"""Builds the docs/veridoc.md documentation file."""

# do `pip install toposort`
import toposort

from lib_deps import *

def readVeriDoc(path):
    lines = open(path).readlines()
    offset = 0
    veridoc = []
    while lines[offset].startswith("include"):
        offset += 1
    while lines[offset].startswith("//"):
        veridoc.append(lines[offset][2:].strip())
        offset += 1
    return "\n".join(veridoc)

def toposortGroup(candidates):
    graph = {}
    for line in candidates:
        target = IncludeReference(None, 0, line)
        graph[target.normPath] = set([path.normPath for path in includePaths(target)])
    candidateSet = set(candidates)
    output = []
    for group in toposort.toposort(graph):
        group = list(group.intersection(candidateSet))
        group.sort()
        output += group
    return output

def separate(irefs, l):
    match = set([i for i in irefs if l(i.normPath)])
    remainder = irefs - match
    return (match, remainder)

class Documentater:
    def __init__(self):
        TOP=IncludeReference(None, 0, "disk-betree/Bundle.i.dfy")
        allIrefs = set(depsFromDfySource(TOP))
        (allLibs, allBetree) = separate(allIrefs, lambda p: p.startswith("lib/"))
        (sLibs, iLibs) = separate(allLibs, lambda p: p.endswith(".s.dfy"))
        (sBetree, iBetree) = separate(allBetree, lambda p: p.endswith(".s.dfy"))

        self.veridoc_fp = open("docs/veridoc.md", "w")
        self.present(sLibs, "Trusted Libraries")
        self.present(iLibs, "Verified Libraries")
        self.present(sBetree, "Trusted B-epsilon Tree")
        self.present(iBetree, "Verified B-epsilon Tree")
    
    def present(self, irefs, headerText):
        files = [i.normPath for i in irefs]
        self.veridoc_fp.write("# %s\n\n" % headerText)
        for filename in toposortGroup(files):
            self.veridoc_fp.write("**%s** " % filename)
            self.veridoc_fp.write(readVeriDoc(filename))
            self.veridoc_fp.write("\n")
            self.veridoc_fp.write("\n")

Documentater()
